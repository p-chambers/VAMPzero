#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Copyright: Deutsches Zentrum fuer Luft- und Raumfahrt e.V., 2015 (c)
Contact: daniel.boehnke@dlr.de and jonas.jepsen@dlr.de
'''
from VAMPzero.Handler.Parameter import parameter


class cLCR(parameter):
    '''
    The airplane's lift coeficient in cruise condition 

    Lift coefficient may be used to relate the 
    total lift generated by an aircraft to the total 
    area of the wing of the aircraft. In this application 
    it is called the aircraft or planform lift coefficient 
    
    :Wiki: http://en.wikipedia.org/wiki/Lift_coefficient#Aircraft_lift_coefficient    
    :Unit: [ ]
    '''

    def __init__(self, value=0., unit='', parent='', cpacsPath=''):
        super(cLCR, self).__init__(value=value, unit=unit, doc=self.__doc__, status='init', parent=parent,
                                   cpacsPath=cpacsPath)

    def calc(self):
        '''
        Calculates the lift coefficient due to initial cruise condition weight
        
        .. note:: 
           Weight will be TOM * taxi/take-off fraction - fuel mass CLIMB
        '''
        oEM = self.parent.oEM.getValue()
        mPayload = self.parent.payload.mPayload.getValue()
        mFM = self.parent.fuel.mFM.getValue()
        rho = self.parent.atmosphere.rhoCR.getValue()
        TAS = self.parent.atmosphere.TASCR.getValue()
        Aref = self.parent.wing.refArea.getValue()
        mFuelCLIMB = self.parent.fuel.mFuelCLIMB.getValue()

        TOM = oEM + mPayload + mFM
        L = (TOM * 0.96 - mFuelCLIMB) * 9.81
        q = 0.5 * rho * TAS ** 2

        return self.setValueCalc(L / (q * Aref))
